pipeline {
    agent  any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '14'))
        timestamps()
    }
    environment {
        TERRAFROM_CLOUD_API_TOKEN=credentials('TERRAFROM_CLOUD_API_TOKEN')
        TERRAFROM_AWS_ACCESS_KEY_ID=credentials('AWS_ACCESS_KEY_ID')
        TERRAFROM_AWS_SECRET_ACCESS_KEY=credentials('AWS_SECRET_ACCESS_KEY')
        TERRAFROM_AWS_SESSION_TOKEN=credentials('AWS_SESSION_TOKEN')
        PATH="$PATH:/usr/local/bin/"
        AWS_REGION="us-east-2"
    }       
    stages{
        stage ('check config') {
            steps {
                script{
                    dir("terraform-operator"){
                        env.isResourceDeleted = sh(returnStdout: true, script: 'cat .proton/deployment-metadata.json | jq .isResourceDeleted').trim()
                        env.protonArn = sh(returnStdout: true, script: 'cat .proton/deployment-metadata.json | jq .resourceMetadata.arn').trim()
                        sh 'python3 updateTerraVars.py'
                        sh 'aws eks update-kubeconfig --region us-east-2 --name terraform-operator'
                        sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status IN_PROGRESS"
                    }
                }
            }   
        }
        stage ('terraform init') {
            steps {
                script{
                  dir("terraform-operator"){  
                  sh 'terraform init'
                  }
                }
            }   
        }
        stage ('terraform plan') {
            steps {
                script{
                    dir("terraform-operator"){
                     sh 'terraform plan'
                    }
                }
            }
        }
        stage ('Approve terraform plan') {
            when{
                expression {
                    env.GIT_BRANCH == 'main' 
                }
            }
            steps {
                script{
                     timeout(unit: 'MINUTES', time: 15){
                         approval=input message: 'Apply terraform',
                             parameters: [booleanParam(name: 'Confirm', defaultValue: false)]
                     }

                    if(!approval){
                        currentBuild.result = 'ABORTED'
                        sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status FAILED"
                        error("Terraform plan not approved, aborting")
                    }
                }
            }
        }
        stage ('terraform apply') {
            when{
                expression {
                    env.GIT_BRANCH == 'main' && (env.isResourceDeleted=="false")
                }
            }
            steps {
                script{
                    dir("terraform-operator"){
                        try{
                            sh 'terraform apply'
                            sh 'aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status SUCCEEDED'
                        }catch(Exception e){
                            sh 'aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status FAILED'
                        }
                    }
                }
            }
        }
        stage ('terraform destroy') {
            when{
                expression {
                    env.GIT_BRANCH == 'main' && (env.isResourceDeleted=="true") 
                }
            }
            steps {
                script{
                    dir("terraform-operator"){
                        try{
                            sh 'terraform destroy'
                            sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status SUCCEEDED"
                        }catch(Exception e){
                            sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status FAILED"
                        }
                    }
                }
            }
        }
    }
    post { 
        always {
            script{
                   echo "build cleanup "
            }
        }
        success { 
              script {
                      sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status SUCCEEDED"
                }
        }
        failure {
            script {
              sh "aws proton notify-resource-deployment-status-change --resource-arn ${protonArn} --status FAILED"
             }
        }
    }
}
